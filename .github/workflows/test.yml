

name: test
on:
  push:
    branches:
      - master

jobs:
  pr2docissue:
    # if: contains( github.event.pull_request.labels.*.name, 'Needs Documentation')
    runs-on: ubuntu-latest
    name: Create issue on doc repo for labeled issue
    steps:

      # obfuscate the github token so it can be used on jobs triggered from forks
      - name: Clear GH Token
        id: token
        uses: opengisch/clear-token@v1.0.12
        with:
          bot_token_encrypted: ddbdec32940df79f1adf2369b4b10f10b5a66f65
          bot_token_xor_key: a1b2c3d47311f8e29e204f85a81b4df4a44e252c

      # get the PR body
      - uses: octokit/request-action@v2.x
        id: get_pr_info
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        with:
          route: GET /repos/:owner/:repo/pulls/:pull_number
          owner: qgis
          repo: QGIS
          pull_number: 33496

      # extract body from json output
      - id: get_pr_body
        uses: gr2m/get-json-paths-action@v1.x
        with:
          json: ${{ steps.get_pr_info.outputs.data }}
          body: "body"

      - env:
          DATA: ${{ steps.get_pr_body.outputs.body }}
        run: "echo $DATA"

      # get commits from the PR
      - uses: octokit/request-action@v2.x
        id: get_pr_commits
        env:
          GITHUB_TOKEN: ${{ steps.token.outputs.token }}
        with:
          route: GET /repos/:owner/:repo/pulls/:pull_number/commits
          owner: qgis
          repo: QGIS
          pull_number: 33496

      # extracts the matching commits
      - id: filtered_commits
        env:
          JSON_DATA: ${{ steps.get_pr_commits.outputs.data }}
        run: |
          COMMITS_MESSAGES=$(echo ${JSON_DATA} | jq '.[].commit.message | select( . |test("\\[needs?.doc(umentation)?s?\\]"; "i")) | sub("\\[needs?.doc(umentation)?s?\\]"; "\n\n\n"; "i")')
          echo "::set-output name=commits::$(echo ${COMMITS_MESSAGES} | tr -d '\n' )"

      - env:
          DATA: ${{ steps.filtered_commits.outputs.commits }}
        run: "echo $DATA"


